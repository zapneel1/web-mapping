// App.js
import React, { useState, useRef, useEffect } from "react";
import maplibregl from "maplibre-gl";
import "maplibre-gl/dist/maplibre-gl.css";

function App() {
  // Map container ref and map instance ref
  const mapContainer = useRef(null);
  const map = useRef(null);

  // State for UI
  const [activeTab, setActiveTab] = useState("map");     // "map" or "settings"
  const [darkMode, setDarkMode] = useState(false);
  const [currentStyle, setCurrentStyle] = useState(
    // Default to the first style in mapStyles
    "https://api.maptiler.com/maps/satellite/style.json?key=AGMBRAsSD2L65HSvLA4i"
  );

  // Available map styles from MapTiler (replace YOUR_MAPTILER_KEY)
  const mapStyles = [
    { label: "Satellite", url: "https://api.maptiler.com/maps/satellite/style.json?key=YOUR_MAPTILER_KEY" },
    { label: "Streets",   url: "https://api.maptiler.com/maps/streets/style.json?key=YOUR_MAPTILER_KEY" },
    { label: "Basic",     url: "https://api.maptiler.com/maps/basic/style.json?key=YOUR_MAPTILER_KEY" },
    { label: "Bright",    url: "https://api.maptiler.com/maps/bright/style.json?key=YOUR_MAPTILER_KEY" },
    { label: "Topographic", url: "https://api.maptiler.com/maps/topo/style.json?key=YOUR_MAPTILER_KEY" },
  ];

  // Initialize MapLibre map once
  useEffect(() => {
    if (map.current) return; // initialize map only once
    map.current = new maplibregl.Map({
      container: mapContainer.current,
      style: currentStyle,
      center: [0, 0],
      zoom: 1.5
    });
    // Add default navigation controls (zoom and rotate):contentReference[oaicite:8]{index=8}
    map.current.addControl(new maplibregl.NavigationControl(), "top-right");
  }, [currentStyle]); // Note: if style URL changes, setStyle is called below

  // Update map style when currentStyle changes
  useEffect(() => {
    if (map.current && map.current.isStyleLoaded()) {
      map.current.setStyle(currentStyle);
    }
  }, [currentStyle]);

  // Apply dark/light mode theme to page
  useEffect(() => {
    document.body.style.backgroundColor = darkMode ? "#1e1e1e" : "#ffffff";
    // (Further CSS could toggle class names or variables here)
  }, [darkMode]);

  // Handle style button click
  const handleStyleChange = (styleUrl) => {
    setCurrentStyle(styleUrl);
  };

  // Handle dark mode toggle
  const toggleDarkMode = () => {
    setDarkMode(prev => !prev);
  };

  return (
    <div style={{ width: "100vw", height: "100vh" }}>
      {/* Tab Buttons */}
      <div style={{ position: "absolute", top: 10, left: 10, zIndex: 10 }}>
        <button onClick={() => setActiveTab("map")} style={{ marginRight: "8px" }}>
          Map
        </button>
        <button onClick={() => setActiveTab("settings")}>
          Settings
        </button>
      </div>

      {/* Settings Tab */}
      {activeTab === "settings" && (
        <div style={{
            position: "absolute", top: 50, left: 10, zIndex: 10,
            background: darkMode ? "#333" : "#fff", color: darkMode ? "#fff" : "#000",
            padding: "10px", borderRadius: "4px"
        }}>
          <h3>App Settings</h3>
          <label>
            <input
              type="checkbox"
              checked={darkMode}
              onChange={toggleDarkMode}
            />
            {" "}Enable Dark Mode
          </label>
        </div>
      )}

      {/* Map Tab */}
      {activeTab === "map" && (
        <>
          {/* Map Container */}
          <div ref={mapContainer}
               style={{ position: "absolute", top: 0, bottom: 0, left: 0, right: 0 }} />

          {/* Style Switcher Buttons */}
          <div style={{ position: "absolute", bottom: 10, left: 10, zIndex: 10 }}>
            {mapStyles.map(style => (
              <button
                key={style.label}
                onClick={() => handleStyleChange(style.url)}
                style={{ display: "block", margin: "2px 0" }}
              >
                {style.label}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default App;
